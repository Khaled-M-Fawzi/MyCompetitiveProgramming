********************** find *************************
Returns an iterator to the first element in the range [first,last] that compares equal to val
If no such element is found, the function returns last
vector<int>v={2,3,4,5,6}
if(find(v.begin(),v.end(),4)!=v.end())
cout<<"founded";else cout<<"Not founded";
Complixty :  linear in the distance between first and last

********************** find_if *************************
Returns an iterator to the first element in the range [first,last] for which pred returns true
If no such element is found, the function returns last
bool iseven(int i)
{
    return i%2==0;
}
vector<int>v={3,4,8,23,6}
vector<int>::iterator it=find_if(v.begin(),v.end(),iseven);
cout<<*it;
Complixty :  linear in the distance between first and last

********************** find_if_not *************************
Returns an iterator to the first element in the range [first,last] for which pred returns false
If no such element is found, the function returns last
bool pred(int i)
{
    return i%2;
}
vector<int>v={3,4,8,23,6}
vector<int>::iterator it=find_if_not(v.begin(),v.end(),pred);
cout<<*it;
Complixty :  linear in the distance between first and last

********************** find_end *************************
Searches the range [first1,last1] for the last occurrence of the sequence defined by [first2,last2] 
and returns an iterator to its first element, or last1 if no occurrences are found

vector<int>v={1,2},v1={5,1,2,3,1,2,4};
auto it=find_end(v1.begin(),v1.end(),v.begin(),v.end());
 cout<<"at index : "<<distance(v1.begin(),it); // 4
 OR 
 bool pred(int i,int j)
 {
     return (i==j);
 }
vector<int>v={1,2},v1={5,1,2,3,1,2,4};
auto it=find_end(v1.begin(),v1.end(),v.begin(),v.end(),pred);
cout<<"at index : "<<distance(v1.begin(),it); // 4
Complexity : linear in count2*count1, where countX is the distance between firstX and lastX 

********************** find_first_of *************************
it=find_first_of(first1,last1,first2,last2) OR it=find_first_of(first1,last1,first2,last2,compare)
Returns an iterator to the first element in the range [first1,last1] that matches any of the elements in [first2,last2]
If no such element is found, the function returns last1
Complexity : linear in count1*count2 (where countX is the distance between firstX and lastX)

********************** adjacent_find *************************
it=adjacent_find(first,last)
Searches the range [first,last] for the first occurrence of two consecutive elements that match
and returns an iterator to the first of these two elements, or last if no such pair is found
Complixty :  linear in the distance between first and last
