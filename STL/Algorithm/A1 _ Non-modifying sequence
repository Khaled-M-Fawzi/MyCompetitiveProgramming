********************** all_of *************************
Test condition on all elements in range
Returns true if pred returns true for all the elements in the range [first,last] or if the range is empty, and false otherwise
bool pred
int main () 
{
  sarray<int,8> foo = {3,5,7,11,13,17,19,23};
  if (all_of(foo.begin(), foo.end(), [](int i){return i%2;} ))
    cout << "All the elements are odd numbers.\n";
  return 0;
}
OR
bool pred(int i)
{
    return i%2;
}
int main () 
{
  sarray<int,8> foo = {3,5,7,11,13,17,19,23};
  if (all_of(foo.begin(), foo.end(), pred ))
    cout << "All the elements are odd numbers.\n";
  return 0;
}
Complexity : linear in the distance between first and last
********************** any_of *************************
Test if any element in range fulfills condition
Returns true if pred returns true for any of the elements in the range [first,last] or the range is empty, and false otherwise
nt main () 
{
  array<int,7> foo = {0,1,-1,3,-3,5,-5};
  if ( any_of(foo.begin(), foo.end(), [](int i){return i<0;}) )
    cout << "There are negative elements in the range.\n";
  return 0;
}
Complexity : linear in the distance between first and last
********************** none_of *************************
Test if no elements fulfill condition
Returns true if pred returns false for all the elements in the range [first,last] or if the range is empty, and false otherwise.
int main () 
{
  array<int,8> foo = {1,2,4,8,16,32,64,128};

  if ( none_of(foo.begin(), foo.end(), [](int i){return i<0;}) )
    cout << "There are no negative elements in the range.\n";

  return 0;
}
Complexity : linear in the distance between first and last
********************** for_each *************************
Applies function fn to each of the elements in the range [first,last]
void myfunction (int i) 
{  
  cout << ' ' << i;
}
struct myclass 
{          
  void operator() (int i) {cout << ' ' << i;}
} myobject;
int main ()
{
  vector<int> myvector={10,20,30};
  std::cout << "myvector contains:";
  for_each (myvector.begin(), myvector.end(), myfunction);
  cout << '\n';

  cout << "myvector contains:";
  for_each (myvector.begin(), myvector.end(), myobject);
  cout << '\n';

  return 0;
}
This function is belong to Modifying Sequence thus

struct myclass
{
  void operator() (int &i) {i++;}
} myobject;
vector<int> myvector={10,20,30};
cout << "myvector contains:";
for_each (myvector.begin(), myvector.end(), myobject);
cout << '\n';
for(int z:myvector)cout<<z<<' '; // 11 21 31
Complexity : linear in the distance between first and last
