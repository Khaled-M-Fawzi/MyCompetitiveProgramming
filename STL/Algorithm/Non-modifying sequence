********************** all_of *************************
Test condition on all elements in range
Returns true if pred returns true for all the elements in the range [first,last] or if the range is empty, and false otherwise
int main () 
{
  array<int,8> foo = {3,5,7,11,13,17,19,23};
  if (all_of(foo.begin(), foo.end(), [](int i){return i%2;} ))
    cout << "All the elements are odd numbers.\n";
  return 0;
}
OR
bool pred(int i)
{
    return i%2;
}
int main () 
{
  sarray<int,8> foo = {3,5,7,11,13,17,19,23};
  if (all_of(foo.begin(), foo.end(), pred ))
    cout << "All the elements are odd numbers.\n";
  return 0;
}
Complexity : linear in the distance between first and last
********************** any_of *************************
Test if any element in range fulfills condition
Returns true if pred returns true for any of the elements in the range [first,last] or the range is empty, and false otherwise
nt main () 
{
  array<int,7> foo = {0,1,-1,3,-3,5,-5};
  if ( any_of(foo.begin(), foo.end(), [](int i){return i<0;}) )
    cout << "There are negative elements in the range.\n";
  return 0;
}
Complexity : linear in the distance between first and last
********************** none_of *************************
Test if no elements fulfill condition
Returns true if pred returns false for all the elements in the range [first,last] or if the range is empty, and false otherwise.
int main () 
{
  array<int,8> foo = {1,2,4,8,16,32,64,128};

  if ( none_of(foo.begin(), foo.end(), [](int i){return i<0;}) )
    cout << "There are no negative elements in the range.\n";

  return 0;
}
Complexity : linear in the distance between first and last

********************** find *************************
Returns an iterator to the first element in the range [first,last] that equal to val
If no such element is found, the function returns last
vector<int>v={2,3,4,5,6}
if(find(v.begin(),v.end(),4)!=v.end())
cout<<"founded";else cout<<"Not founded";
Complixty :  linear in the distance between first and last

********************** find_if *************************
Returns an iterator to the first element in the range [first,last] for which pred returns true
If no such element is found, the function returns last
bool iseven(int i)
{
    return i%2==0;
}
vector<int>v={3,4,8,23,6}
vector<int>::iterator it=find_if(v.begin(),v.end(),iseven);
cout<<*it;  // 4
Complixty :  linear in the distance between first and last

********************** find_if_not *************************
Returns an iterator to the first element in the range [first,last] for which pred returns false
If no such element is found, the function returns last
bool pred(int i)
{
    return i%2==0;
}
vector<int>v={3,4,8,23,6}
vector<int>::iterator it=find_if_not(v.begin(),v.end(),pred);
cout<<*it;  //3
Complixty :  linear in the distance between first and last

********************** find_end *************************
Searches the range [first1,last1] for the last occurrence of the sequence defined by [first2,last2] 
and returns an iterator to its first element, or last1 if no occurrences are found

vector<int>v={1,2},v1={5,1,2,3,1,2,4};
auto it=find_end(v1.begin(),v1.end(),v.begin(),v.end());
 cout<<"at index : "<<distance(v1.begin(),it); // 4
 OR 
 bool pred(int i,int j)
 {
     return (i==j);
 }
vector<int>v={1,2},v1={5,1,2,3,1,2,4};
auto it=find_end(v1.begin(),v1.end(),v.begin(),v.end(),pred);
cout<<"at index : "<<distance(v1.begin(),it); // 4
Complexity : O(nm) // n number of elements of first range , m numbers of elements of second range

********************** find_first_of *************************
it=find_first_of(first1,last1,first2,last2) OR it=find_first_of(first1,last1,first2,last2,compare)
Returns an iterator to the first element in the range [first1,last1] that matches any of the elements in [first2,last2]
If no such element is found, the function returns last1
Complexity : O(nm) // n number of elements of first range , m numbers of elements of second range

********************** adjacent_find *************************
it=adjacent_find(first,last)
Searches the range [first,last] for the first occurrence of two consecutive elements that match
and returns an iterator to the first of these two elements, or last if no such pair is found
Complixty :  linear in the distance between first and last

********************** count *************************
int cnt=count(first itr,last itr,val)
Returns the number of elements in the range [first,last] that compare equal to val
Complexity : Linear in the distance between first and last

********************** count_if *************************
int cnt=count_if(first itr,last itr,pred)
Return number of elements in range satisfying condition
Complexity : Linear in the distance between first and last

********************** mismatch *************************
mismatch(first1,last1,first2) OR
mismatch(first1,last1,first2,pred)
Compares the elements in the range [first1,last1] with those in the range beginning at first2 and 
returns iterator of the first element of both sequences that does not match
vector<int>v1={1,2,3,5},v2={1,2,4,5};
    pair<vector<int>::iterator , vector<int>::iterator> p = mismatch(v1.begin(),v1.end(),v2.begin());
    cout<<*p.first<<' '<<*p.second;  // 3 4
Complexity : Linear in the distance between first1 and last1

********************** equal *************************
bool g=equal(first1,last1,first2) OR bool g=equal(first1,last1,first2,compare)
Compares the elements in the range [first1,last1] with those in the range beginning at first2, and returns true if all of the elements 
in both ranges match
Complexity :  linear in the distance between first1 and last1

********************** search *************************
auto it=search(first1,last1,first2,last2) OR auto it=search(first1,last1,first2,last2,compare)
Searches the range [first1,last1] for the first occurrence of the sequence defined by [first2,last2]
and returns an iterator to its first element, or last1 if no occurrences are found
(search function) for the first occurence but (if_end function) for the last occurence
Complexity : linear in count1*count2 (where countX is the distance between firstX and lastX)
********************** search_n *************************
auto it=search_n(first1,last1,count,val) OR auto it=search_n(first1,last1,count,val,compare)
Searches the range [first,last] for a sequence of count elements, each comparing equal to val (or for which pred returns true)
    vector<int>v={3,4,4,5,6,5};
    if(search_n(v.begin(),v.end(),2,4)!=v.end())
        cout<<"sequence 1 exists"<<endl;
    if(search_n(v.begin(),v.end(),2,5)!=v.end())
        cout<<"sequence 2 exists"<<endl;
this code prints : sequence 1 exists
Complexity : linear in the distance between first and last

********************** is_permutation *************************
bool g=is_permutation(first1 itr,last1 itr,first2 itr) OR
bool g=is_permutation(first1 itr,last1 itr,first2 itr,pred)
Compares the elements in the range [first1,last1] with those in the range beginning at first2
and returns true if all of the elements in both ranges match, even in a different order
Complexity : If both sequence are equal (with the elements in the same order), linear in the distance between first1 and last1
Otherwise , up to quadratic N : (where N is the distance between first1 and last1)
