********************** fill *************************
Assigns val to all the elements in the range [first,last]
fill(first itr,last itr,val)
Complexity : linear in the distance between first and last
********************** fill_n *************************
Assigns val to the first n elements of the sequence pointed by first
fill(first itr, n ,val)
Complexity : linear in n
********************** generate *************************
Assigns the value returned by successive calls to gen to the elements in the range [first,last]
generate(first itr, last itr, pred)

int pred()
{
    static int i=0;
     return ++i;
}
vector<int>v={3,4,8,9,2,3,5,2}
generate(v.begin(),v.end(),pred); // 1 2 3 4 5 6 7 8

Complexity : linear in the distance between first and last

********************** generate_n *************************
Assigns the value returned by successive calls to gen to the first n elements of the sequence pointed by first
generate(first itr, n , pred)
Complexity : linear in n

********************** for_each *************************
Applies function fn to each of the elements in the range [first,last]
void myfunction (int i) 
{  
  cout << ' ' << i;
}
struct myclass 
{          
  void operator() (int i) {cout << ' ' << i;}
} myobject;
int main ()
{
  vector<int> myvector={10,20,30};
  cout << "myvector contains:";
  for_each (myvector.begin(), myvector.end(), myfunction);
  cout << '\n';

  cout << "myvector contains:";
  for_each (myvector.begin(), myvector.end(), myobject);
  cout << '\n';

  return 0;
}
// Another Example
struct myclass
{
  void operator() (int &i) {i++;}
} myobject;
vector<int> myvector={10,20,30};
cout << "myvector contains:";
for_each (myvector.begin(), myvector.end(), myobject);
cout << '\n';
for(int z:myvector)cout<<z<<' '; // 11 21 31
Complexity : linear in the distance between first and last
