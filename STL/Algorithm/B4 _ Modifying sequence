********************** remove *************************
Remove elements from range that equal to val and returns an iterator to the new end of that range
auto it = remove(first iterator , last iterator , val)
Complexity : linear in the distance between first and last

********************** remove_if *************************
Remove elements from range for which pred returns true and returns an iterator to the new end of that range
auto it = remove(first iterator , last iterator , pred)
bool isodd (int i) { return ((i%2)==1); }
vector<int>v={2,3,4,5,6,7,8} ;
vector<int>::iterator = remove(v.begin(),v.end(),isodd) ; // 2 4 5 6 8
Complexity : linear in the distance between first and last

********************** remove_copy *************************
Copies the elements in the range [first,last] to the range beginning at result, except those elements that compare equal to val
remove_copy(first1,last1,first2,val)
int myints[] = {10,20,30,30,20,10,10,20};               // 10 20 30 30 20 10 10 20
  vector<int> myvector (8);
  remove_copy (myints,myints+8,myvector.begin(),20); // 10 30 30 10 10 0 0 0
Complexity : linear in the distance between first and last

********************** remove_copy_if *************************
Copies the elements in the range [first,last] to the range beginning at result , except those elements for which pred returns true

bool isodd (int i) { return ((i%2)==1); }
int main () {
  int myints[] = {1,2,3,4,5,6,7,8,9};
       vector<int> myvector (9);
       remove_copy_if (myints,myints+9,myvector.begin(),IsOdd);  // 2 4 6 8 0 0 0 0 0
Complexity : linear in the distance between first and last

********************** unique *************************
Removes all but the first element from every consecutive group of equivalent elements in the range [first,last] and returns an iterator 
to the new end of that range
auto it = unique(first,last)  OR  auto it = unique(first,last,pred)
int myints[] = {10,20,20,20,30,30,20,20,10};           
  vector<int> myvector (myints,myints+9);
  vector<int>::iterator it = unique (myvector.begin(), myvector.end());   // 10 20 30 20 10 ?  ?  ?  ?
                                                                                                 ^
^ refers to it ( the new end of range)
myvector.resize( distance(myvector.begin(),it) ); // 10 20 30 20 10
Complexity : linear in the distance between first and last

********************** unique_copy *************************
Copies the elements in the range [first,last] to the range beginning at result, except consecutive duplicates and returns an iterator 
to the new end of that range
auto it = unique_copy(first1,last1,first2)  OR  auto it = unique_copy(first1,last1,first2,pred)
Complexity : linear in the distance between first and last
