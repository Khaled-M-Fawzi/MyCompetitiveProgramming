********************** transform *************************

is used in two different ways :
 
1.unary operation : This method performs unary operation op on the elements in range [first1, last1] and stores the result 
in range starting from result
[x1,x2,x3,x4] ===>>> [f(x1),f(x2),f(x3),f(x4)]

2.Binary operation:- This method performs binary operation binary_op on the elements in range [first1, last1] with the elements 
in the range starting with iterator first2 and stores the result in range starting from result
[x1,x2,x3,x4] , [y1,y2,y3,y4] ===>>> [f(x1,y1),f(x2,y2),f(x3,y3),f(x4,y4)]

int op_increase (int i) { return ++i; }
int main () 
{
  vector<int> foo,bar;
  
  for (int i=1; i<6; i++)
    foo.push_back (i*10);                         // foo: 10 20 30 40 50

  bar.resize(foo.size());                         // allocate space

  transform (foo.begin(), foo.end(), bar.begin(), op_increase);    // bar: 11 21 31 41 51
                                                
  // std::plus adds together its two arguments:
  transform (foo.begin(), foo.end(), bar.begin(), foo.begin(), plus<int>());    // foo: 21 41 61 81 101
                               
  return 0;
}
Complexity : linear in the distance between first and last

********************** replace *************************
Assigns new_value to all the elements in the range [first,last]that compare equal to old_value

vector<int>v= {10,20,30,30,20,10,10,20}
replace (v.begin(), v.end(), 20, 99); // 10 99 30 30 99 10 10 99

Complexity : linear in the distance between first and last

********************** replace_if *************************
Assigns new_value to all the elements in the range [first,last]for which pred returns true

struct myclass
{
     int operator()(int i){ return i%2;}
}isodd;
vector<int>v= {35,20,3,30,20,17,10,29};
replace (v.begin(), v.end(), isodd, 0); // 0 20 0 30 20 0 10 0

Complexity : linear in the distance between first and last

********************** replace_copy *************************
Copies the elements in the range [first,last] to the range beginning at result, replacing the appearances of old_value by new_value

  int myints[] = { 10, 20, 30, 30, 20, 10, 10, 20 };
  vector<int> myvector (8);
  replace_copy (myints, myints+8, myvector.begin(), 20, 99); // 10 99 30 30 99 10 10 99
   
Complexity : linear in the distance between first and last

********************** replace_copy_if *************************
Copies the elements in the range [first,last] to the range beginning at result, replacing those for which pred returns true by new_value

bool isodd (int i) { return i%2; }
vector<int> foo,bar;
// set some values:
for (int i=1; i<10; i++) foo.push_back(i);          // 1 2 3 4 5 6 7 8 9
bar.resize(foo.size());   // allocate space
replace_copy_if (foo.begin(), foo.end(), bar.begin(), IsOdd, 0);// 0 2 0 4 0 6 0 8 0
                                                        
Complexity : linear in the distance between first and last
