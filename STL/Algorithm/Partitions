********************** is_partitioned *************************
is_partitioned is used for finding whether the range [first, last] is partitioned or not . A range is said to be partitioned with respect 
to a condition if all the elements for which the condition evaluates to true precede those for which it is false 
if range is empty then this function returns true
is_partitioned(first , last , pred)
bool pred(int a) 
{ 
    return (a % 2 == 0); 
} 
int main() 
{ 
    vector<int> v1 = { 2, 4, 6, 3, 5, 7, 9 }; 
    
    if (is_partitioned(v1.begin(), v1.end(), pred)) 
        cout << "All the even no. are present before odd no."; 
     else 
        cout << "All the even no. are not present before odd no."; 
    
    v1.push_back(16); 
  
    if (is_partitioned(v1.begin(), v1.end(), pred))  
        cout << "\n All the even no. are present before odd no."; 
     else 
        cout << "\n All the even no. are not present before odd no."; 
  
    return 0; 
} 
Complexity : linear in the distance between first and last

************************ partition *****************************
Partition range in two
Rearranges the elements from the range [first,last] , in such a way that all the elements for which pred returns true precede all those 
for which it returns false . The iterator returned points to the first element of the second group
auto it = partition(first,last,pred)
Complexity : linear in the distance between first and last

********************** stable_partition *************************
stable_Partition range in two
Rearranges the elements from the range [first,last] , in such a way that all the elements for which pred returns true precede all those 
for which it returns false . The iterator returned points to the first element of the second group
auto it = stable_partition(first,last,pred)
Complexity : If enough extra memory is available, linear in the distance between first and last
otherwise N*log(N) element swaps (where N is the distance between first and last)

partition           ===>>> The relative ordering within each group is not necessarily the same as before the call
stable_partition    ===>>> The relative ordering within each group is the same as before the call

********************** partition_copy *************************
Copies the elements in the range [first,last] for which pred returns true into the range pointed by result_true , and those for which
it does not into the range pointed by result_false
partition_copy (first, last, result_true , result_false , IsOdd);

bool IsOdd (int i) { return (i%2)==1; }
int main () 
{
       vector<int> foo {1,2,3,4,5,6,7,8,9};
       vector<int> odd, even;
  
       int n = std::count_if (foo.begin(), foo.end(), IsOdd);
       odd.resize(n); even.resize(foo.size()-n);

       partition_copy (foo.begin(), foo.end(), odd.begin(), even.begin(), IsOdd);

       for (int& x:odd)    cout << ' ' << x ;    //  odd: 1 3 5 7 9
       cout << '\n';
       for (int& x:even)   cout << ' ' << x ;    //  even: 2 4 6 8
       cout << '\n';
       
  return 0;
}
Complexity : Linear in the distance between first and last
