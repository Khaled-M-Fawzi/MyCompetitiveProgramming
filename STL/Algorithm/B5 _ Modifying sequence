********************** reverse *************************
Reverses the order of the elements in the range [first,last]
reverse(first,last)
Complexity : Linear in half the distance between first and last : Swaps elements.

********************** reverse_copy *************************
Copies the elements in the range [first,last] to the range beginning at result, but in reverse order
reverse_copy(first1,last1,first2)
Complexity : Linear in half the distance between first and last : Swaps elements
********************** rotate *************************
Rotate left the elements in range
Rotates the order of the elements in the range [first,last] , in such a way that the element pointed 
by middle becomes the new first element
rotate(first,middle,last)

vector<int> myvector;
  for (int i=1; i<10; ++i) myvector.push_back(i); // 1 2 3 4 5 6 7 8 9

  rotate(myvector.begin(),myvector.begin()+3,myvector.end());
                                                  // 4 5 6 7 8 9 1 2 3
Complexity : linear in the distance between first and last

********************** rotate_copy *************************
Copy range rotated left
Copies the elements in the range [first,last) to the range beginning at result, but rotating the order of the elements in such a way 
that the element pointed by middle becomes the first element in the resulting range
rotate(first1,middle,last1,first2)
Complexity : linear in the distance between first and last

********************** random_shuffle *************************
Rearranges the elements in the range [first,last] randomly
random_shuffle(first,last) OR 
int myrandom (int i) { return rand()%i;}
random_shuffle(first,last,myrandom)
Complexity : linear in the distance between first and last
