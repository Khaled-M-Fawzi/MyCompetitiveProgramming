#include<deque>
deque<object_type> deque_name;  
deque<object_type> dq = {2,5,7,3}
********************* Iterators *****************************
dq.begin()    || O(1) || Returns an iterator pointing to the first element in the deque
dq.end()      || O(1) || Returns an iterator pointing to the last element in the deque
dq.rbegin()   || O(1) || Returns a reverse iterator pointing to the last element in the deque
dq.rend()     || O(1) || Returns a reverse iterator pointing to the first element in the deque 
dq.cbegin()   || O(1) || Returns a const_iterator pointing to the first element in the deque
dq.cend()     || O(1) || Returns a const_iterator pointing to the last element in the deque
dq.crbegin()  || O(1) || Returns a const_reverse_iterator pointing to the last element in the deque
dq.crend()    || O(1) || Returns a const_reverse_iterator pointing to the first element in the deque
********************* Element Access **************************
dq.front()    || O(1) || Returns a reference pointing to the first element in the deque
dq.back()     || O(1) || Returns a reference pointing to the last element in the deque
dq.at(pos)    || O(1) || Returns a reference to the element at position pos in the deque (O-Indexed)
operator[pos] || O(1) || Returns a reference to the element at position pos in the deque (O-Indexed)
********************* Capacity ********************************
dq.size()     || O(1) || Returns the number of elements in the deque
dq.max_size() || O(1) || Returns the maximum number of elements that the deque can hold
dq.empty()    || O(1) || Returns whether the deque is empty 
dq.resize(n)  ||      || Change size of deque to n size
{
   If n is smaller than the current container size, the content is reduced to its first n elements, removing those beyond
   If n is greater than the current container size, the content is expanded by inserting at the end as many elements as
   needed to reach a size of n
   Complexity : Linear on the number of elements inserted / erased 
}
********************* Modifiers *******************************
dq.assign(n,val) OR dq1.assign(dq2 first iterator ,dq2 last iterator)
Complexity : Linear on initial + final sizes

dq.insert(iterator,val) OR dq.insert(iterator,n,val) OR dq1.insert(dq1 iterator,dq2 first iterator,dq2 last iterator)
Complexity : Linear on the number of elements inserted plus the number of elements after position

dq.erase(iterator) OR dq.erase(first iterator , last iterator)
Complexity : Linear on the number of elements erased plus the number of elements after the last element deleted 
(Linear on the size of deque before erase operation)

dq.emplace(iterator,val) || Insert a new element at position of iterator (faster)
Complexity : Linear on the number of elements after position

dq.push_back(val)    || O(1) || Add element at the end of the deque
dq.push_front(val)   || O(1) || Add element at the begin of the deque
dq.emplace_back(val) || O(1) || Add element at the end of the deque      (faster)
dq.emplace_front(val)|| O(1) || Add element at the begin of the deque    (faster)
dq.pop_back()        || O(1) || Delete the last element of the deque
dq.pop_front()       || O(1) || Delete the first element of the deque
dq1.swap(v2)         || O(1) || Sawp two dequedeque
swap(v[0],v[2])     || O(1) || Sawp two elements
dq.clear()  || Linear in size || Removes all elements from the deque , leaving the deque with a size of 0
********************* Member functions *******************************
dq1.operator=(v2) || Linear in size (v1+v2) || Assigns new contents , replacing its current contents, and modifying its size   
