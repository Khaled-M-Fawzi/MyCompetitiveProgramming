************************* Modifiers **************************
insert
Inserts additional characters into the string right before the character indicated by pos (or p):
// inserting into a string
#include <iostream>
#include <string>

int main ()
{
  std::string str="to be question";
  std::string str2="the ";
  std::string str3="or not to be";
  std::string::iterator it;

  // used in the same order as described above:
  str.insert(6,str2);                 // to be (the )question
  str.insert(6,str3,3,4);             // to be (not )the question
  str.insert(10,"that is cool",8);    // to be not (that is )the question
  str.insert(10,"to be ");            // to be not (to be )that is the question
  str.insert(15,1,':');               // to be not to be(:) that is the question
  it = str.insert(str.begin()+5,','); // to be(,) not to be: that is the question
  str.insert (str.end(),3,'.');       // to be, not to be: that is the question(...)
  str.insert (it+2,str3.begin(),str3.begin()+3); // to be, or not to be: that is the question...
}
Complexity : linear in the new string length


operator+=
Extends the string by appending additional characters at the end of its current value

  std::string name ("John");
  std::string family ("Smith");
  name += " K. ";         // c-string
  name += family;         // string
  name += '\n';           // character
  cout<<name;            // John K. Smith

Complexity : linear in the new string length


append
Extends the string by appending additional characters at the end of its current value:
  std::string str;
  std::string str2="Writing ";
  std::string str3="print 10 and then 5 more";

  // used in the same order as described above:
  str.append(str2);                       // "Writing "
  str.append(str3,6,3);                   // "10 "
  str.append("dots are cool",5);          // "dots "
  str.append("here: ");                   // "here: "
  str.append(10u,'.');                    // ".........."
  str.append(str3.begin()+8,str3.end());  // " and then 5 more"
  str.append<int>(5,0x2E);                // "....."

  std::cout << str << '\n';              // Writing 10 dots here: .......... and then 5 more.....
Complexity : linear in the new string length


push_back
Appends character c to the end of the string, increasing its length by one
s.push_back('k')
Generally amortized constant, but up to linear in the new string length

pop_back
Erases the last character of the string, effectively reducing its length by one
Complexity : constant


Swap
Swap string values 
s1.swap(s2)
Complexity : constant
