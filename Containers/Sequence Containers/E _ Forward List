#include <forward_list>
forward_list<object_type> object_name;
forward_list<object_type> object_name={2,3,5,8}
space of memory for forward list = 1/3 space of memory of list
********************* Iterators *****************************
fl.begin()    || O(1) || Returns an iterator pointing to the first element in the list
fl.end()      || O(1) || Returns an iterator pointing to the last element in the list
fl.cbegin()   || O(1) || Returns a const_iterator pointing to the first element in the list
fl.cend()     || O(1) || Returns a const_iterator pointing to the last element in the list
********************* Capacity ********************************
fl.max_size() || O(1) || Returns the maximum number of elements that the list can hold
fl.empty()    || O(1) || Returns whether the list is empty 
fl.resize(n,val)||    || Change size of list to n size , val: It is a value which is to be inserted in a newly constructed space
{
   If n is smaller than the current container size, the content is reduced to its first n elements, removing those beyond
   If n is greater than the current container size, the content is expanded by inserting at the end as many elements as
   needed to reach a size of n
   Complexity : Linear on the number of elements inserted / erased  plus up to linear in the size 
}
********************* Element Access **************************
fl.front()    || O(1) || Returns a reference pointing to the first element in the list
********************* Modifiers *******************************
fl.assign(n,val) OR l1.assign(l2 first iterator ,l2 last iterator)
Complexity : Linear on initial + final sizes

fl.insert_after(iterator,const val) OR l.insert_after(iterator,n,const val) OR 
fl1.insert_after(fl1 iterator,fl2 first iterator,fl2 last iterator) OR fl.insert_after ( it, {1,2,3} );
Complexity : Linear on the number of elements inserted 

fl.erase_after(iterator) //O(1) OR fl.erase_after(first iterator , last iterator)
Complexity : Linear on the number of elements erased 

fl.emplace_after(iterator,const val) || Insert a new element at position of iterator (faster)
Complexity : Constant

fl.push_front(const val)   || O(1) || Add element at the begin of the list
fl.emplace_front(const val)|| O(1) || Add element at the begin of the list  (faster)
fl.pop_front()             || O(1) || Delete the first element of the list
fl1.swap(l2)               || O(1) || Sawp two lists
********************* Member functions *******************************
fl1.operator=(fl2) || Linear in size (v1+v2) || Assigns new contents , replacing its current contents, and modifying its size
swap(fl[0],fl[2])           || O(1) || Sawp two elements
fl.clear()            || Linear in size || Removes all elements from the list , leaving the list with a size of 0

********************* Operations *******************************
splice_after() : transfers the elements from list fl into a list fl1 at position and this leads to the altering 
the sizes of both the list
fl.splice_after(iterator, fl1); // transfer all elements of fl1 to fl , size of fl will increase by size of fl1 , 
size of fl1 will be zero 
fl.splice_after(iterator, fl1, iterator pos1);  // only one element that transferred
fl.splice_after(iterator, fl1, iterator first, iterator last);  
Assume that the number of elements that transferred is k , the size of fl become fl.size+k and the size of fl1 become fl1-k
Complexity : linear in the number of elements transferred

fl.remove(val) : Removes from the list all the elements that compare equal to val
Complexity : Linear in container size

fl.remove_if(function of conditon) : Removes from the list all the elements for which Predicate pred returns true
// a predicate implemented as a function:
bool single_digit (const int& value) { return (value<10); }

// a predicate implemented as a class:
struct is_odd {
  bool operator() (const int& value) { return (value%2)==1; }
};
int main()
{
     forward_list<int>l={34,5,87,50,2,79};
     fl.remove_if (single_digit);        // 5 2
     fl.remove_if (is_odd()); // 87 79
}
Complexity : Linear in list size


fl.unique()  OR unique(pred) // removes all the duplicate elements present consecutively from the list 

bool pred( float x,float y)  
{  
    return(int(x)==int(y));  
}  
forward_list<int>fl={2,2.5,2.3,4,4,4,3,3,4,3}
fl.unique()   // fl becomes 2 , 2.5 , 2.3 , 4, 3 , 4 , 3
fl.unique(pred)  // fl becomes 2  , 4, 3 , 4 , 3
Complexity : Linear in container size 

fl.merge() // merges two sorted list in an increasing order.It merges y list into 
the given list container and this removes all the elements from y
forward_list1.merge(list2);  
forward_list1.merge(list2,compare);  

bool compare(int first, int second)  
{    
    return first<second;  
}  
forward_list<int> forward_li={1,2,3,4};  
forward_list<int> forward_li1={5,6,7,8};  
fl.merge(fl1);  OR li.merge(fl1,compare);
Complexity :  linear in the sum of both container sizes 

fl.sort() OR fl.sort(compare)// arranges the elements of a given list in an increasing order
Complexity : NlogN where N is the container size

fl.reverse() // Reverses the order of the elements in the list container
Complexity : Linear in list size
