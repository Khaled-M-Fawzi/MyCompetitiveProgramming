#include <forward_list>
forward_list<object_type> object_name;
forward_list<object_type> object_name={2,3,5,8}
space of memory for forward list = 1/3 space of memory of list
********************* Iterators *****************************
fl.begin()    || O(1) || Returns an iterator pointing to the first element in the list
fl.end()      || O(1) || Returns an iterator pointing to the last element in the list
fl.cbegin()   || O(1) || Returns a const_iterator pointing to the first element in the list
fl.cend()     || O(1) || Returns a const_iterator pointing to the last element in the list
********************* Capacity ********************************
fl.max_size() || O(1) || Returns the maximum number of elements that the list can hold
fl.empty()    || O(1) || Returns whether the list is empty 
fl.resize(n,val)||    || Change size of list to n size , val: It is a value which is to be inserted in a newly constructed space
{
   If n is smaller than the current container size, the content is reduced to its first n elements, removing those beyond
   If n is greater than the current container size, the content is expanded by inserting at the end as many elements as
   needed to reach a size of n
   Complexity : Linear on the number of elements inserted / erased  plus up to linear in the size 
}
********************* Element Access **************************
fl.front()    || O(1) || Returns a reference pointing to the first element in the list
********************* Modifiers *******************************
fl.assign(n,val) OR l1.assign(l2 first iterator ,l2 last iterator)
Complexity : Linear on initial + final sizes

fl.insert_after(iterator,const val) OR l.insert_after(iterator,n,const val) OR 
fl1.insert_after(fl1 iterator,fl2 first iterator,fl2 last iterator) OR fl.insert_after ( it, {1,2,3} );
Complexity : Linear on the number of elements inserted 

fl.erase_after(iterator) //O(1) OR fl.erase_after(first iterator , last iterator)
Complexity : Linear on the number of elements erased 

fl.emplace_after(iterator,const val) || Insert a new element at position of iterator (faster)
Complexity : Constant

fl.push_front(const val)   || O(1) || Add element at the begin of the list
fl.emplace_front(const val)|| O(1) || Add element at the begin of the list  (faster)
fl.pop_front()             || O(1) || Delete the first element of the list
fl1.swap(l2)               || O(1) || Sawp two lists
********************* Member functions *******************************
fl1.operator=(fl2) || Linear in size (v1+v2) || Assigns new contents , replacing its current contents, and modifying its size
swap(fl[0],fl[2])           || O(1) || Sawp two elements
fl.clear()            || Linear in size || Removes all elements from the list , leaving the list with a size of 0
