************** advance ****************
Advances the iterator it by n element positions

  list<int> mylist;
  for (int i=1; i<10; i++) mylist.push_back (i*10); // 10 20 30 40 50 60 70 80 90
  list<int>::iterator it = mylist.begin();
  advance (it,5);
  cout << *it << '\n';   // 60

Complexity : Constant for random-access iterators . Otherwise, linear in n

************** distance ****************
Calculates the number of elements between first and last

  list<int> mylist;
  for (int i=1; i<10; i++) mylist.push_back (i*10); // 10 20 30 40 50 60 70 80 90
  list<int>::iterator first = mylist.begin();
  list<int>::iterator last = mylist.end();
  cout << distance(first,last) << '\n';   // 9
  
Complexity : Constant for random-access iterators . Otherwise, linear in n

