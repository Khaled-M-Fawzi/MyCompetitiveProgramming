********************* Operations *******************************
int cnt = m.count(val);
Searches the container for elements with a key equivalent to k and returns the number of matches
Because all elements in a map container are unique, the function can only return 1 (if the element is found) or zero (otherwise).
Complexity : Logarithmic in size


auto it = m.find(val)
Searches the container for an element with a key equivalent to k and returns an iterator to it if found
otherwise it returns an iterator to map::end.

int main ()
{
     map<char,int> mymap;
     map<char,int>::iterator it;

     mymap['a']=50;
     mymap['b']=100;
     mymap['c']=150;
     mymap['d']=200;

     it = mymap.find('b');
     if (it != mymap.end())
     mymap.erase (it);              // erase b

     cout << "a => " << mymap.find('a')->second << '\n';  // 50
     cout << "c => " << mymap.find('c')->second << '\n';  // 150 
     cout << "d => " << mymap.find('d')->second << '\n';  // 200

  return 0;
}
Complexity : Logarithmic in size


 
auto it = st.lower_bound(val)
Returns an iterator pointing to the first element in the container whose key is equal or greater than val
if no such element , it's return iterator  it's key  is size of map and it's second is size-1 of map

    map<char,int> mymap;
    map<char,int>::iterator it;

    mymap['a']=20;
    mymap['b']=40;
    mymap['c']=60;
    it=mymap.lower_bound ('b');  // it points to b 
    
Complexity : Logarithmic in size


auto it = st.upper_bound(val)
Returns an iterator pointing to the first element in the container whose key is  greater than val
if no such element , it's return iterator it's key  is size of map and it's second is size-1 of map

    map<char,int> mymap;
    map<char,int>::iterator it;

    mymap['a']=20;
    mymap['b']=40;
    mymap['c']=60;

    it=mymap.upper_bound ('b');  // it points to c
     
Complexity : Logarithmic in size


                              Equal_range

 int main ()
{
  std::map<char,int> mymap;

  mymap['a']=10;
  mymap['b']=20;
  mymap['c']=30;

  std::pair<std::map<char,int>::iterator,std::map<char,int>::iterator> ret;
  ret = mymap.equal_range('b');

  std::cout << "lower bound points to: ";
  std::cout << ret.first->first << " => " << ret.first->second << '\n';   // lower bound points to: 'b' => 20

  std::cout << "upper bound points to: ";
  std::cout << ret.second->first << " => " << ret.second->second << '\n';  upper bound points to: 'c' => 30

  return 0;
}

Complexity : Logarithmic in size
