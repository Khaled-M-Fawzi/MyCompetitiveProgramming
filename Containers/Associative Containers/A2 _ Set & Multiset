********************* Operations *******************************
int cnt = st.count(val);
Searches the container for elements equivalent to val and returns the number of matches
Because all elements in a set container are unique, the function can only return 1 (if the element is found) or zero (otherwise)
but not at multiset
Complexity : Logarithmic in size


auto it = st.find(val)
Searches the container for an element equivalent to val and returns an iterator to it if found
otherwise it returns an iterator to set::end

    set<int>st;auto it=st.begin();
    for(int i=1;i<10;i++)
        st.insert(it,i);
    if(st.find(8)!=st.end())
        cout<<"found";
    
Complexity : Logarithmic in size


 
auto it = st.lower_bound(val)
Returns an iterator pointing to the first element in the container which either it is equal or greater than val
if no such element , it's return iterator iterator it's value is size of set

    set<int>st;auto it=st.begin();
    for(int i=1;i<10;i++)
        st.insert(it,i);
     auto it = st.lower_bound(3);  // 3
     
Complexity : Logarithmic in size


auto it = st.upper_bound(val)
Returns an iterator pointing to the first element in the container which it is greater than val
if no such element , it's return iterator it's value is size of set

    set<int>st;auto it=st.begin();
    for(int i=1;i<10;i++)
        st.insert(it,i);
     auto it = st.upper_bound(3);  // 4
     
Complexity : Logarithmic in size


                              Equal_range

  set<int> st;
  for (int i=1; i<=5; i++) st.insert(i*10);   // st: 10 20 30 40 50

  pair<set<int>::const_iterator,set<int>::const_iterator> ret;
  
  ret = st.equal_range(30);
  cout << "the lower bound points to: " << *ret.first << '\n';  // 30
  cout << "the upper bound points to: " << *ret.second << '\n'; // 40
  
  ret = st.equal_range(5);
  cout << "the lower bound points to: " << *ret.first << '\n';  // 10
  cout << "the upper bound points to: " << *ret.second << '\n'; // 10
  
  ret = st.equal_range(50);
  cout << "the lower bound points to: " << *ret.first << '\n';  // 50
  cout << "the upper bound points to: " << *ret.second << '\n'; // 5

  ret = st.equal_range(60);
  cout << "the lower bound points to: " << *ret.first << '\n';  // 5
  cout << "the upper bound points to: " << *ret.second << '\n'; // 5

Complexity : Logarithmic in size
